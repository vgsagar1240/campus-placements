rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isEmployee() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'employee';
    }
    
    function isStudent() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }
    
    function isValidUser() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    function hasValidRole() {
      return isEmployee() || isStudent();
    }

    // Users collection - User profiles and authentication data
    match /users/{userId} {
      // Users can read/write their own profile
      allow read, write: if isOwner(userId);
      
      // Employees can read all user profiles
      allow read: if isEmployee();
      
      // Validate user data on creation/update
      allow create: if isAuthenticated() && 
        request.auth.uid == userId &&
        request.resource.data.keys().hasAll(['email', 'role', 'createdAt']) &&
        request.resource.data.role in ['student', 'employee'] &&
        request.resource.data.email is string &&
        request.resource.data.createdAt is timestamp;
      
      allow update: if isOwner(userId) &&
        request.resource.data.role == resource.data.role; // Prevent role changes
    }

    // Notices collection - Public announcements
    match /notices/{noticeId} {
      // Everyone can read notices (public announcements)
      allow read: if true;
      
      // Only employees can create/update/delete notices
      allow create: if isEmployee() &&
        request.resource.data.keys().hasAll(['title', 'body', 'createdAt', 'createdAtTs']) &&
        request.resource.data.title is string &&
        request.resource.data.body is string &&
        request.resource.data.createdAt is string &&
        request.resource.data.createdAtTs is timestamp;
      
      allow update, delete: if isEmployee();
    }

    // Drives collection - Job placement drives
    match /drives/{driveId} {
      // Everyone can read drives (public job postings)
      allow read: if true;
      
      // Only employees can create/update/delete drives
      allow create: if isEmployee() &&
        request.resource.data.keys().hasAll(['title', 'description', 'company', 'createdAt', 'updatedAt']) &&
        request.resource.data.title is string &&
        request.resource.data.description is string &&
        request.resource.data.company is string &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.updatedAt is timestamp;
      
      allow update, delete: if isEmployee();
      
      // Drive resources subcollection
      match /resources/{resourceId} {
        allow read: if true; // Public read for drive resources
        allow write: if isEmployee();
      }
    }

    // Drive Applications - Student applications to drives
    match /driveApplications/{appId} {
      // Students can read their own applications
      allow read: if isStudent() && 
        resource.data.studentId == request.auth.uid;
      
      // Employees can read all applications
      allow read: if isEmployee();
      
      // Students can create applications for themselves
      allow create: if isStudent() &&
        request.resource.data.studentId == request.auth.uid &&
        request.resource.data.keys().hasAll(['driveId', 'studentId', 'status', 'appliedAt']) &&
        request.resource.data.status == 'applied' &&
        request.resource.data.appliedAt is timestamp;
      
      // Only employees can update application status
      allow update: if isEmployee() &&
        request.resource.data.studentId == resource.data.studentId; // Prevent student ID changes
    }

    // Registrations collection - Student registrations for drives
    match /registrations/{regId} {
      // Students can read their own registrations
      allow read: if isStudent() && 
        resource.data.studentId == request.auth.uid;
      
      // Employees can read all registrations
      allow read: if isEmployee();
      
      // Students can create registrations for themselves
      allow create: if isStudent() &&
        request.resource.data.studentId == request.auth.uid &&
        request.resource.data.keys().hasAll(['driveId', 'studentId', 'status', 'appliedAt']) &&
        request.resource.data.status == 'applied' &&
        request.resource.data.appliedAt is string;
      
      // Only employees can update registration status
      allow update: if isEmployee() &&
        request.resource.data.studentId == resource.data.studentId;
    }

    // Resume storage - User resume files
    match /resumes/{userId}/{allPaths=**} {
      // Users can read/write their own resumes
      allow read, write: if isOwner(userId);
      
      // Employees can read all resumes
      allow read: if isEmployee();
      
      // Validate resume data
      allow create: if isOwner(userId) &&
        request.resource.data.keys().hasAll(['fileName', 'downloadURL', 'uploadedAt']) &&
        request.resource.data.fileName is string &&
        request.resource.data.downloadURL is string &&
        request.resource.data.uploadedAt is timestamp;
    }

    // Coding Profiles - User coding platform profiles
    match /codingProfiles/{profileId} {
      // Users can read/write their own coding profiles
      allow read, write: if isOwner(profileId);
      
      // Employees can read all coding profiles
      allow read: if isEmployee();
      
      // Validate coding profile data
      allow create: if isOwner(profileId) &&
        request.resource.data.keys().hasAll(['userId', 'platform', 'username', 'updatedAt']) &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.platform is string &&
        request.resource.data.username is string &&
        request.resource.data.updatedAt is timestamp;
    }

    // Daily Question Statistics - Coding question analytics
    match /dailyQuestionStats/{statId} {
      // All authenticated users can read stats
      allow read: if isValidUser();
      
      // Users can create/update their own stats
      allow create, update: if isValidUser() &&
        request.resource.data.userId == request.auth.uid;
      
      // Employees can read all stats
      allow read: if isEmployee();
    }

    // User Activity Logs - System activity tracking
    match /userActivity/{activityId} {
      // Users can read their own activity logs
      allow read: if isOwner(activityId);
      
      // Employees can read all activity logs
      allow read: if isEmployee();
      
      // System can create activity logs
      allow create: if isValidUser() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['userId', 'action', 'timestamp']) &&
        request.resource.data.action is string &&
        request.resource.data.timestamp is timestamp;
    }

    // Settings collection - System configuration
    match /settings/{settingId} {
      // Public read access for invite codes and public settings
      allow read: if true;
      
      // Only employees can modify settings
      allow write: if isEmployee();
    }

    // Admin collection - Administrative data
    match /admin/{document=**} {
      // Only employees can access admin data
      allow read, write: if isEmployee();
    }

    // Analytics collection - System analytics
    match /analytics/{document=**} {
      // Only employees can access analytics
      allow read, write: if isEmployee();
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}